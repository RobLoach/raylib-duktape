
/**
 * This file is automatically generated by npm it.
 */
#include <duktape.h>
#include <dukglue/dukglue.h>
#include <dukglue/detail_primitive_types.h>
#include <raylib.h>
#include "raylib-duktape.h"

namespace dukglue {
namespace types {
template<>
struct DukType<::Vector2> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Vector2 read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Vector2 out;
        
        duk_get_prop_string(ctx, arg_idx, "x");
        out.x = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "y");
        out.y = duk_get_number(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Vector2 value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_number(ctx, value.x);
        duk_put_prop_string(ctx, obj_idx, "x");
        duk_push_number(ctx, value.y);
        duk_put_prop_string(ctx, obj_idx, "y");
    }
};

template<>
struct DukType<::Vector3> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Vector3 read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Vector3 out;
        
        duk_get_prop_string(ctx, arg_idx, "x");
        out.x = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "y");
        out.y = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "z");
        out.z = duk_get_number(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Vector3 value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_number(ctx, value.x);
        duk_put_prop_string(ctx, obj_idx, "x");
        duk_push_number(ctx, value.y);
        duk_put_prop_string(ctx, obj_idx, "y");
        duk_push_number(ctx, value.z);
        duk_put_prop_string(ctx, obj_idx, "z");
    }
};

template<>
struct DukType<::Vector4> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Vector4 read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Vector4 out;
        
        duk_get_prop_string(ctx, arg_idx, "x");
        out.x = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "y");
        out.y = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "z");
        out.z = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "w");
        out.w = duk_get_number(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Vector4 value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_number(ctx, value.x);
        duk_put_prop_string(ctx, obj_idx, "x");
        duk_push_number(ctx, value.y);
        duk_put_prop_string(ctx, obj_idx, "y");
        duk_push_number(ctx, value.z);
        duk_put_prop_string(ctx, obj_idx, "z");
        duk_push_number(ctx, value.w);
        duk_put_prop_string(ctx, obj_idx, "w");
    }
};

template<>
struct DukType<::Matrix> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Matrix read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Matrix out;
        
        duk_get_prop_string(ctx, arg_idx, "m0");
        out.m0 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m4");
        out.m4 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m8");
        out.m8 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m12");
        out.m12 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m1");
        out.m1 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m5");
        out.m5 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m9");
        out.m9 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m13");
        out.m13 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m2");
        out.m2 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m6");
        out.m6 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m10");
        out.m10 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m14");
        out.m14 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m3");
        out.m3 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m7");
        out.m7 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m11");
        out.m11 = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "m15");
        out.m15 = duk_get_number(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Matrix value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_number(ctx, value.m0);
        duk_put_prop_string(ctx, obj_idx, "m0");
        duk_push_number(ctx, value.m4);
        duk_put_prop_string(ctx, obj_idx, "m4");
        duk_push_number(ctx, value.m8);
        duk_put_prop_string(ctx, obj_idx, "m8");
        duk_push_number(ctx, value.m12);
        duk_put_prop_string(ctx, obj_idx, "m12");
        duk_push_number(ctx, value.m1);
        duk_put_prop_string(ctx, obj_idx, "m1");
        duk_push_number(ctx, value.m5);
        duk_put_prop_string(ctx, obj_idx, "m5");
        duk_push_number(ctx, value.m9);
        duk_put_prop_string(ctx, obj_idx, "m9");
        duk_push_number(ctx, value.m13);
        duk_put_prop_string(ctx, obj_idx, "m13");
        duk_push_number(ctx, value.m2);
        duk_put_prop_string(ctx, obj_idx, "m2");
        duk_push_number(ctx, value.m6);
        duk_put_prop_string(ctx, obj_idx, "m6");
        duk_push_number(ctx, value.m10);
        duk_put_prop_string(ctx, obj_idx, "m10");
        duk_push_number(ctx, value.m14);
        duk_put_prop_string(ctx, obj_idx, "m14");
        duk_push_number(ctx, value.m3);
        duk_put_prop_string(ctx, obj_idx, "m3");
        duk_push_number(ctx, value.m7);
        duk_put_prop_string(ctx, obj_idx, "m7");
        duk_push_number(ctx, value.m11);
        duk_put_prop_string(ctx, obj_idx, "m11");
        duk_push_number(ctx, value.m15);
        duk_put_prop_string(ctx, obj_idx, "m15");
    }
};

template<>
struct DukType<::Color> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Color read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Color out;
        
        duk_get_prop_string(ctx, arg_idx, "r");
        out.r = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "g");
        out.g = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "b");
        out.b = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "a");
        out.a = duk_get_uint(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Color value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_uint(ctx, value.r);
        duk_put_prop_string(ctx, obj_idx, "r");
        duk_push_uint(ctx, value.g);
        duk_put_prop_string(ctx, obj_idx, "g");
        duk_push_uint(ctx, value.b);
        duk_put_prop_string(ctx, obj_idx, "b");
        duk_push_uint(ctx, value.a);
        duk_put_prop_string(ctx, obj_idx, "a");
    }
};

template<>
struct DukType<::Rectangle> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Rectangle read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Rectangle out;
        
        duk_get_prop_string(ctx, arg_idx, "x");
        out.x = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "y");
        out.y = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "width");
        out.width = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "height");
        out.height = duk_get_number(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Rectangle value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_number(ctx, value.x);
        duk_put_prop_string(ctx, obj_idx, "x");
        duk_push_number(ctx, value.y);
        duk_put_prop_string(ctx, obj_idx, "y");
        duk_push_number(ctx, value.width);
        duk_put_prop_string(ctx, obj_idx, "width");
        duk_push_number(ctx, value.height);
        duk_put_prop_string(ctx, obj_idx, "height");
    }
};

template<>
struct DukType<::Image> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Image read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Image out;
        
        duk_get_prop_string(ctx, arg_idx, "data");
        out.data = (void *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "width");
        out.width = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "height");
        out.height = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "mipmaps");
        out.mipmaps = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "format");
        out.format = duk_get_int(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Image value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_pointer(ctx, value.data);
        duk_put_prop_string(ctx, obj_idx, "data");
        duk_push_int(ctx, value.width);
        duk_put_prop_string(ctx, obj_idx, "width");
        duk_push_int(ctx, value.height);
        duk_put_prop_string(ctx, obj_idx, "height");
        duk_push_int(ctx, value.mipmaps);
        duk_put_prop_string(ctx, obj_idx, "mipmaps");
        duk_push_int(ctx, value.format);
        duk_put_prop_string(ctx, obj_idx, "format");
    }
};

template<>
struct DukType<::Texture> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Texture read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Texture out;
        
        duk_get_prop_string(ctx, arg_idx, "id");
        out.id = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "width");
        out.width = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "height");
        out.height = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "mipmaps");
        out.mipmaps = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "format");
        out.format = duk_get_int(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Texture value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_uint(ctx, value.id);
        duk_put_prop_string(ctx, obj_idx, "id");
        duk_push_int(ctx, value.width);
        duk_put_prop_string(ctx, obj_idx, "width");
        duk_push_int(ctx, value.height);
        duk_put_prop_string(ctx, obj_idx, "height");
        duk_push_int(ctx, value.mipmaps);
        duk_put_prop_string(ctx, obj_idx, "mipmaps");
        duk_push_int(ctx, value.format);
        duk_put_prop_string(ctx, obj_idx, "format");
    }
};

template<>
struct DukType<::RenderTexture> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::RenderTexture read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::RenderTexture out;
        
        duk_get_prop_string(ctx, arg_idx, "id");
        out.id = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "texture");
        out.texture = raylib_duktape_get<Texture>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "depth");
        out.depth = raylib_duktape_get<Texture>(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::RenderTexture value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_uint(ctx, value.id);
        duk_put_prop_string(ctx, obj_idx, "id");
        raylib_duktape_push<Texture>(ctx, value.texture);
        duk_put_prop_string(ctx, obj_idx, "texture");
        raylib_duktape_push<Texture>(ctx, value.depth);
        duk_put_prop_string(ctx, obj_idx, "depth");
    }
};

template<>
struct DukType<::NPatchInfo> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::NPatchInfo read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::NPatchInfo out;
        
        duk_get_prop_string(ctx, arg_idx, "source");
        out.source = raylib_duktape_get<Rectangle>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "left");
        out.left = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "top");
        out.top = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "right");
        out.right = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "bottom");
        out.bottom = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "layout");
        out.layout = duk_get_int(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::NPatchInfo value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Rectangle>(ctx, value.source);
        duk_put_prop_string(ctx, obj_idx, "source");
        duk_push_int(ctx, value.left);
        duk_put_prop_string(ctx, obj_idx, "left");
        duk_push_int(ctx, value.top);
        duk_put_prop_string(ctx, obj_idx, "top");
        duk_push_int(ctx, value.right);
        duk_put_prop_string(ctx, obj_idx, "right");
        duk_push_int(ctx, value.bottom);
        duk_put_prop_string(ctx, obj_idx, "bottom");
        duk_push_int(ctx, value.layout);
        duk_put_prop_string(ctx, obj_idx, "layout");
    }
};

template<>
struct DukType<::GlyphInfo> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::GlyphInfo read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::GlyphInfo out;
        
        duk_get_prop_string(ctx, arg_idx, "value");
        out.value = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "offsetX");
        out.offsetX = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "offsetY");
        out.offsetY = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "advanceX");
        out.advanceX = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "image");
        out.image = raylib_duktape_get<Image>(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::GlyphInfo value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_int(ctx, value.value);
        duk_put_prop_string(ctx, obj_idx, "value");
        duk_push_int(ctx, value.offsetX);
        duk_put_prop_string(ctx, obj_idx, "offsetX");
        duk_push_int(ctx, value.offsetY);
        duk_put_prop_string(ctx, obj_idx, "offsetY");
        duk_push_int(ctx, value.advanceX);
        duk_put_prop_string(ctx, obj_idx, "advanceX");
        raylib_duktape_push<Image>(ctx, value.image);
        duk_put_prop_string(ctx, obj_idx, "image");
    }
};

template<>
struct DukType<::Font> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Font read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Font out;
        
        duk_get_prop_string(ctx, arg_idx, "baseSize");
        out.baseSize = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "glyphCount");
        out.glyphCount = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "glyphPadding");
        out.glyphPadding = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "texture");
        out.texture = raylib_duktape_get<Texture2D>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "recs");
        out.recs = (Rectangle *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "glyphs");
        out.glyphs = (GlyphInfo *)duk_get_pointer(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Font value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_int(ctx, value.baseSize);
        duk_put_prop_string(ctx, obj_idx, "baseSize");
        duk_push_int(ctx, value.glyphCount);
        duk_put_prop_string(ctx, obj_idx, "glyphCount");
        duk_push_int(ctx, value.glyphPadding);
        duk_put_prop_string(ctx, obj_idx, "glyphPadding");
        raylib_duktape_push<Texture2D>(ctx, value.texture);
        duk_put_prop_string(ctx, obj_idx, "texture");
        duk_push_pointer(ctx, value.recs);
        duk_put_prop_string(ctx, obj_idx, "recs");
        duk_push_pointer(ctx, value.glyphs);
        duk_put_prop_string(ctx, obj_idx, "glyphs");
    }
};

template<>
struct DukType<::Camera3D> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Camera3D read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Camera3D out;
        
        duk_get_prop_string(ctx, arg_idx, "position");
        out.position = raylib_duktape_get<Vector3>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "target");
        out.target = raylib_duktape_get<Vector3>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "up");
        out.up = raylib_duktape_get<Vector3>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "fovy");
        out.fovy = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "projection");
        out.projection = duk_get_int(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Camera3D value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Vector3>(ctx, value.position);
        duk_put_prop_string(ctx, obj_idx, "position");
        raylib_duktape_push<Vector3>(ctx, value.target);
        duk_put_prop_string(ctx, obj_idx, "target");
        raylib_duktape_push<Vector3>(ctx, value.up);
        duk_put_prop_string(ctx, obj_idx, "up");
        duk_push_number(ctx, value.fovy);
        duk_put_prop_string(ctx, obj_idx, "fovy");
        duk_push_int(ctx, value.projection);
        duk_put_prop_string(ctx, obj_idx, "projection");
    }
};

template<>
struct DukType<::Camera2D> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Camera2D read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Camera2D out;
        
        duk_get_prop_string(ctx, arg_idx, "offset");
        out.offset = raylib_duktape_get<Vector2>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "target");
        out.target = raylib_duktape_get<Vector2>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "rotation");
        out.rotation = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "zoom");
        out.zoom = duk_get_number(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Camera2D value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Vector2>(ctx, value.offset);
        duk_put_prop_string(ctx, obj_idx, "offset");
        raylib_duktape_push<Vector2>(ctx, value.target);
        duk_put_prop_string(ctx, obj_idx, "target");
        duk_push_number(ctx, value.rotation);
        duk_put_prop_string(ctx, obj_idx, "rotation");
        duk_push_number(ctx, value.zoom);
        duk_put_prop_string(ctx, obj_idx, "zoom");
    }
};

template<>
struct DukType<::Mesh> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Mesh read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Mesh out;
        
        duk_get_prop_string(ctx, arg_idx, "vertexCount");
        out.vertexCount = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "triangleCount");
        out.triangleCount = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "vertices");
        out.vertices = (float *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "texcoords");
        out.texcoords = (float *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "texcoords2");
        out.texcoords2 = (float *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "normals");
        out.normals = (float *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "tangents");
        out.tangents = (float *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "colors");
        out.colors = (unsigned char *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "indices");
        out.indices = (unsigned short *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "animVertices");
        out.animVertices = (float *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "animNormals");
        out.animNormals = (float *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "boneIds");
        out.boneIds = (unsigned char *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "boneWeights");
        out.boneWeights = (float *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "vaoId");
        out.vaoId = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "vboId");
        out.vboId = (unsigned int *)duk_get_pointer(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Mesh value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_int(ctx, value.vertexCount);
        duk_put_prop_string(ctx, obj_idx, "vertexCount");
        duk_push_int(ctx, value.triangleCount);
        duk_put_prop_string(ctx, obj_idx, "triangleCount");
        duk_push_pointer(ctx, value.vertices);
        duk_put_prop_string(ctx, obj_idx, "vertices");
        duk_push_pointer(ctx, value.texcoords);
        duk_put_prop_string(ctx, obj_idx, "texcoords");
        duk_push_pointer(ctx, value.texcoords2);
        duk_put_prop_string(ctx, obj_idx, "texcoords2");
        duk_push_pointer(ctx, value.normals);
        duk_put_prop_string(ctx, obj_idx, "normals");
        duk_push_pointer(ctx, value.tangents);
        duk_put_prop_string(ctx, obj_idx, "tangents");
        duk_push_pointer(ctx, value.colors);
        duk_put_prop_string(ctx, obj_idx, "colors");
        duk_push_pointer(ctx, value.indices);
        duk_put_prop_string(ctx, obj_idx, "indices");
        duk_push_pointer(ctx, value.animVertices);
        duk_put_prop_string(ctx, obj_idx, "animVertices");
        duk_push_pointer(ctx, value.animNormals);
        duk_put_prop_string(ctx, obj_idx, "animNormals");
        duk_push_pointer(ctx, value.boneIds);
        duk_put_prop_string(ctx, obj_idx, "boneIds");
        duk_push_pointer(ctx, value.boneWeights);
        duk_put_prop_string(ctx, obj_idx, "boneWeights");
        duk_push_uint(ctx, value.vaoId);
        duk_put_prop_string(ctx, obj_idx, "vaoId");
        duk_push_pointer(ctx, value.vboId);
        duk_put_prop_string(ctx, obj_idx, "vboId");
    }
};

template<>
struct DukType<::Shader> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Shader read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Shader out;
        
        duk_get_prop_string(ctx, arg_idx, "id");
        out.id = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "locs");
        out.locs = (int *)duk_get_pointer(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Shader value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_uint(ctx, value.id);
        duk_put_prop_string(ctx, obj_idx, "id");
        duk_push_pointer(ctx, value.locs);
        duk_put_prop_string(ctx, obj_idx, "locs");
    }
};

template<>
struct DukType<::MaterialMap> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::MaterialMap read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::MaterialMap out;
        
        duk_get_prop_string(ctx, arg_idx, "texture");
        out.texture = raylib_duktape_get<Texture2D>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "color");
        out.color = raylib_duktape_get<Color>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "value");
        out.value = duk_get_number(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::MaterialMap value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Texture2D>(ctx, value.texture);
        duk_put_prop_string(ctx, obj_idx, "texture");
        raylib_duktape_push<Color>(ctx, value.color);
        duk_put_prop_string(ctx, obj_idx, "color");
        duk_push_number(ctx, value.value);
        duk_put_prop_string(ctx, obj_idx, "value");
    }
};

template<>
struct DukType<::Material> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Material read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Material out;
        
        duk_get_prop_string(ctx, arg_idx, "shader");
        out.shader = raylib_duktape_get<Shader>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "maps");
        out.maps = (MaterialMap *)duk_get_pointer(ctx, -1);
        // Skipped: params

        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Material value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Shader>(ctx, value.shader);
        duk_put_prop_string(ctx, obj_idx, "shader");
        duk_push_pointer(ctx, value.maps);
        duk_put_prop_string(ctx, obj_idx, "maps");
        // Skipped: params

    }
};

template<>
struct DukType<::Transform> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Transform read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Transform out;
        
        duk_get_prop_string(ctx, arg_idx, "translation");
        out.translation = raylib_duktape_get<Vector3>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "rotation");
        out.rotation = raylib_duktape_get<Quaternion>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "scale");
        out.scale = raylib_duktape_get<Vector3>(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Transform value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Vector3>(ctx, value.translation);
        duk_put_prop_string(ctx, obj_idx, "translation");
        raylib_duktape_push<Quaternion>(ctx, value.rotation);
        duk_put_prop_string(ctx, obj_idx, "rotation");
        raylib_duktape_push<Vector3>(ctx, value.scale);
        duk_put_prop_string(ctx, obj_idx, "scale");
    }
};

template<>
struct DukType<::BoneInfo> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::BoneInfo read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::BoneInfo out;
        
        duk_get_prop_string(ctx, arg_idx, "name");
        out.name = duk_get_string(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "parent");
        out.parent = duk_get_int(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::BoneInfo value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_string(ctx, value.name);
        duk_put_prop_string(ctx, obj_idx, "name");
        duk_push_int(ctx, value.parent);
        duk_put_prop_string(ctx, obj_idx, "parent");
    }
};

template<>
struct DukType<::Model> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Model read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Model out;
        
        duk_get_prop_string(ctx, arg_idx, "transform");
        out.transform = raylib_duktape_get<Matrix>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "meshCount");
        out.meshCount = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "materialCount");
        out.materialCount = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "meshes");
        out.meshes = (Mesh *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "materials");
        out.materials = (Material *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "meshMaterial");
        out.meshMaterial = (int *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "boneCount");
        out.boneCount = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "bones");
        out.bones = (BoneInfo *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "bindPose");
        out.bindPose = (Transform *)duk_get_pointer(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Model value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Matrix>(ctx, value.transform);
        duk_put_prop_string(ctx, obj_idx, "transform");
        duk_push_int(ctx, value.meshCount);
        duk_put_prop_string(ctx, obj_idx, "meshCount");
        duk_push_int(ctx, value.materialCount);
        duk_put_prop_string(ctx, obj_idx, "materialCount");
        duk_push_pointer(ctx, value.meshes);
        duk_put_prop_string(ctx, obj_idx, "meshes");
        duk_push_pointer(ctx, value.materials);
        duk_put_prop_string(ctx, obj_idx, "materials");
        duk_push_pointer(ctx, value.meshMaterial);
        duk_put_prop_string(ctx, obj_idx, "meshMaterial");
        duk_push_int(ctx, value.boneCount);
        duk_put_prop_string(ctx, obj_idx, "boneCount");
        duk_push_pointer(ctx, value.bones);
        duk_put_prop_string(ctx, obj_idx, "bones");
        duk_push_pointer(ctx, value.bindPose);
        duk_put_prop_string(ctx, obj_idx, "bindPose");
    }
};

template<>
struct DukType<::ModelAnimation> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::ModelAnimation read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::ModelAnimation out;
        
        duk_get_prop_string(ctx, arg_idx, "boneCount");
        out.boneCount = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "frameCount");
        out.frameCount = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "bones");
        out.bones = (BoneInfo *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "framePoses");
        out.framePoses = (Transform**)duk_get_pointer(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::ModelAnimation value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_int(ctx, value.boneCount);
        duk_put_prop_string(ctx, obj_idx, "boneCount");
        duk_push_int(ctx, value.frameCount);
        duk_put_prop_string(ctx, obj_idx, "frameCount");
        duk_push_pointer(ctx, value.bones);
        duk_put_prop_string(ctx, obj_idx, "bones");
        duk_push_pointer(ctx, value.framePoses);
        duk_put_prop_string(ctx, obj_idx, "framePoses");
    }
};

template<>
struct DukType<::Ray> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Ray read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Ray out;
        
        duk_get_prop_string(ctx, arg_idx, "position");
        out.position = raylib_duktape_get<Vector3>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "direction");
        out.direction = raylib_duktape_get<Vector3>(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Ray value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Vector3>(ctx, value.position);
        duk_put_prop_string(ctx, obj_idx, "position");
        raylib_duktape_push<Vector3>(ctx, value.direction);
        duk_put_prop_string(ctx, obj_idx, "direction");
    }
};

template<>
struct DukType<::RayCollision> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::RayCollision read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::RayCollision out;
        
        duk_get_prop_string(ctx, arg_idx, "hit");
        out.hit = duk_get_boolean(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "distance");
        out.distance = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "point");
        out.point = raylib_duktape_get<Vector3>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "normal");
        out.normal = raylib_duktape_get<Vector3>(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::RayCollision value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_boolean(ctx, value.hit);
        duk_put_prop_string(ctx, obj_idx, "hit");
        duk_push_number(ctx, value.distance);
        duk_put_prop_string(ctx, obj_idx, "distance");
        raylib_duktape_push<Vector3>(ctx, value.point);
        duk_put_prop_string(ctx, obj_idx, "point");
        raylib_duktape_push<Vector3>(ctx, value.normal);
        duk_put_prop_string(ctx, obj_idx, "normal");
    }
};

template<>
struct DukType<::BoundingBox> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::BoundingBox read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::BoundingBox out;
        
        duk_get_prop_string(ctx, arg_idx, "min");
        out.min = raylib_duktape_get<Vector3>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "max");
        out.max = raylib_duktape_get<Vector3>(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::BoundingBox value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<Vector3>(ctx, value.min);
        duk_put_prop_string(ctx, obj_idx, "min");
        raylib_duktape_push<Vector3>(ctx, value.max);
        duk_put_prop_string(ctx, obj_idx, "max");
    }
};

template<>
struct DukType<::Wave> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Wave read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Wave out;
        
        duk_get_prop_string(ctx, arg_idx, "frameCount");
        out.frameCount = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "sampleRate");
        out.sampleRate = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "sampleSize");
        out.sampleSize = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "channels");
        out.channels = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "data");
        out.data = (void *)duk_get_pointer(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Wave value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_uint(ctx, value.frameCount);
        duk_put_prop_string(ctx, obj_idx, "frameCount");
        duk_push_uint(ctx, value.sampleRate);
        duk_put_prop_string(ctx, obj_idx, "sampleRate");
        duk_push_uint(ctx, value.sampleSize);
        duk_put_prop_string(ctx, obj_idx, "sampleSize");
        duk_push_uint(ctx, value.channels);
        duk_put_prop_string(ctx, obj_idx, "channels");
        duk_push_pointer(ctx, value.data);
        duk_put_prop_string(ctx, obj_idx, "data");
    }
};

template<>
struct DukType<::AudioStream> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::AudioStream read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::AudioStream out;
        
        duk_get_prop_string(ctx, arg_idx, "buffer");
        out.buffer = (rAudioBuffer *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "processor");
        out.processor = (rAudioProcessor *)duk_get_pointer(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "sampleRate");
        out.sampleRate = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "sampleSize");
        out.sampleSize = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "channels");
        out.channels = duk_get_uint(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::AudioStream value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_pointer(ctx, value.buffer);
        duk_put_prop_string(ctx, obj_idx, "buffer");
        duk_push_pointer(ctx, value.processor);
        duk_put_prop_string(ctx, obj_idx, "processor");
        duk_push_uint(ctx, value.sampleRate);
        duk_put_prop_string(ctx, obj_idx, "sampleRate");
        duk_push_uint(ctx, value.sampleSize);
        duk_put_prop_string(ctx, obj_idx, "sampleSize");
        duk_push_uint(ctx, value.channels);
        duk_put_prop_string(ctx, obj_idx, "channels");
    }
};

template<>
struct DukType<::Sound> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Sound read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Sound out;
        
        duk_get_prop_string(ctx, arg_idx, "stream");
        out.stream = raylib_duktape_get<AudioStream>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "frameCount");
        out.frameCount = duk_get_uint(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Sound value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<AudioStream>(ctx, value.stream);
        duk_put_prop_string(ctx, obj_idx, "stream");
        duk_push_uint(ctx, value.frameCount);
        duk_put_prop_string(ctx, obj_idx, "frameCount");
    }
};

template<>
struct DukType<::Music> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::Music read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::Music out;
        
        duk_get_prop_string(ctx, arg_idx, "stream");
        out.stream = raylib_duktape_get<AudioStream>(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "frameCount");
        out.frameCount = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "looping");
        out.looping = duk_get_boolean(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "ctxType");
        out.ctxType = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "ctxData");
        out.ctxData = (void *)duk_get_pointer(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::Music value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        raylib_duktape_push<AudioStream>(ctx, value.stream);
        duk_put_prop_string(ctx, obj_idx, "stream");
        duk_push_uint(ctx, value.frameCount);
        duk_put_prop_string(ctx, obj_idx, "frameCount");
        duk_push_boolean(ctx, value.looping);
        duk_put_prop_string(ctx, obj_idx, "looping");
        duk_push_int(ctx, value.ctxType);
        duk_put_prop_string(ctx, obj_idx, "ctxType");
        duk_push_pointer(ctx, value.ctxData);
        duk_put_prop_string(ctx, obj_idx, "ctxData");
    }
};

template<>
struct DukType<::VrDeviceInfo> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::VrDeviceInfo read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::VrDeviceInfo out;
        
        duk_get_prop_string(ctx, arg_idx, "hResolution");
        out.hResolution = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "vResolution");
        out.vResolution = duk_get_int(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "hScreenSize");
        out.hScreenSize = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "vScreenSize");
        out.vScreenSize = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "vScreenCenter");
        out.vScreenCenter = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "eyeToScreenDistance");
        out.eyeToScreenDistance = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "lensSeparationDistance");
        out.lensSeparationDistance = duk_get_number(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "interpupillaryDistance");
        out.interpupillaryDistance = duk_get_number(ctx, -1);
        // Skipped: lensDistortionValues

        // Skipped: chromaAbCorrection

        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::VrDeviceInfo value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_int(ctx, value.hResolution);
        duk_put_prop_string(ctx, obj_idx, "hResolution");
        duk_push_int(ctx, value.vResolution);
        duk_put_prop_string(ctx, obj_idx, "vResolution");
        duk_push_number(ctx, value.hScreenSize);
        duk_put_prop_string(ctx, obj_idx, "hScreenSize");
        duk_push_number(ctx, value.vScreenSize);
        duk_put_prop_string(ctx, obj_idx, "vScreenSize");
        duk_push_number(ctx, value.vScreenCenter);
        duk_put_prop_string(ctx, obj_idx, "vScreenCenter");
        duk_push_number(ctx, value.eyeToScreenDistance);
        duk_put_prop_string(ctx, obj_idx, "eyeToScreenDistance");
        duk_push_number(ctx, value.lensSeparationDistance);
        duk_put_prop_string(ctx, obj_idx, "lensSeparationDistance");
        duk_push_number(ctx, value.interpupillaryDistance);
        duk_put_prop_string(ctx, obj_idx, "interpupillaryDistance");
        // Skipped: lensDistortionValues

        // Skipped: chromaAbCorrection

    }
};

template<>
struct DukType<::VrStereoConfig> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::VrStereoConfig read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::VrStereoConfig out;
        
        // Skipped: projection

        // Skipped: viewOffset

        // Skipped: leftLensCenter

        // Skipped: rightLensCenter

        // Skipped: leftScreenCenter

        // Skipped: rightScreenCenter

        // Skipped: scale

        // Skipped: scaleIn

        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::VrStereoConfig value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        // Skipped: projection

        // Skipped: viewOffset

        // Skipped: leftLensCenter

        // Skipped: rightLensCenter

        // Skipped: leftScreenCenter

        // Skipped: rightScreenCenter

        // Skipped: scale

        // Skipped: scaleIn

    }
};

template<>
struct DukType<::FilePathList> {
    typedef std::true_type IsValueType;
    template<typename FullT>
    static ::FilePathList read(duk_context* ctx, duk_idx_t arg_idx) {
        if (!duk_is_object(ctx, arg_idx)) {
            duk_int_t type_idx = duk_get_type(ctx, arg_idx);
            duk_error(ctx, DUK_ERR_TYPE_ERROR, "Argument %d: expected object, got %s", arg_idx, detail::get_type_name(type_idx));
        }
        ::FilePathList out;
        
        duk_get_prop_string(ctx, arg_idx, "capacity");
        out.capacity = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "count");
        out.count = duk_get_uint(ctx, -1);
        duk_get_prop_string(ctx, arg_idx, "paths");
        out.paths = (char**)duk_get_pointer(ctx, -1);
        return out;
    }
    template<typename FullT>
    static void push(duk_context* ctx, ::FilePathList value) {
        duk_idx_t obj_idx = duk_push_object(ctx);
        
        duk_push_uint(ctx, value.capacity);
        duk_put_prop_string(ctx, obj_idx, "capacity");
        duk_push_uint(ctx, value.count);
        duk_put_prop_string(ctx, obj_idx, "count");
        duk_push_pointer(ctx, value.paths);
        duk_put_prop_string(ctx, obj_idx, "paths");
    }
};
}}
void raylib_duktape_gen(duk_context* ctx) {
    // ConfigFlags
    dukglue_register_global(ctx, (int)FLAG_VSYNC_HINT, "FLAG_VSYNC_HINT");
    dukglue_register_global(ctx, (int)FLAG_FULLSCREEN_MODE, "FLAG_FULLSCREEN_MODE");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_RESIZABLE, "FLAG_WINDOW_RESIZABLE");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_UNDECORATED, "FLAG_WINDOW_UNDECORATED");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_HIDDEN, "FLAG_WINDOW_HIDDEN");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_MINIMIZED, "FLAG_WINDOW_MINIMIZED");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_MAXIMIZED, "FLAG_WINDOW_MAXIMIZED");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_UNFOCUSED, "FLAG_WINDOW_UNFOCUSED");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_TOPMOST, "FLAG_WINDOW_TOPMOST");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_ALWAYS_RUN, "FLAG_WINDOW_ALWAYS_RUN");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_TRANSPARENT, "FLAG_WINDOW_TRANSPARENT");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_HIGHDPI, "FLAG_WINDOW_HIGHDPI");
    dukglue_register_global(ctx, (int)FLAG_WINDOW_MOUSE_PASSTHROUGH, "FLAG_WINDOW_MOUSE_PASSTHROUGH");
    dukglue_register_global(ctx, (int)FLAG_MSAA_4X_HINT, "FLAG_MSAA_4X_HINT");
    dukglue_register_global(ctx, (int)FLAG_INTERLACED_HINT, "FLAG_INTERLACED_HINT");

    // TraceLogLevel
    dukglue_register_global(ctx, (int)LOG_ALL, "LOG_ALL");
    dukglue_register_global(ctx, (int)LOG_TRACE, "LOG_TRACE");
    dukglue_register_global(ctx, (int)LOG_DEBUG, "LOG_DEBUG");
    dukglue_register_global(ctx, (int)LOG_INFO, "LOG_INFO");
    dukglue_register_global(ctx, (int)LOG_WARNING, "LOG_WARNING");
    dukglue_register_global(ctx, (int)LOG_ERROR, "LOG_ERROR");
    dukglue_register_global(ctx, (int)LOG_FATAL, "LOG_FATAL");
    dukglue_register_global(ctx, (int)LOG_NONE, "LOG_NONE");

    // KeyboardKey
    dukglue_register_global(ctx, (int)KEY_NULL, "KEY_NULL");
    dukglue_register_global(ctx, (int)KEY_APOSTROPHE, "KEY_APOSTROPHE");
    dukglue_register_global(ctx, (int)KEY_COMMA, "KEY_COMMA");
    dukglue_register_global(ctx, (int)KEY_MINUS, "KEY_MINUS");
    dukglue_register_global(ctx, (int)KEY_PERIOD, "KEY_PERIOD");
    dukglue_register_global(ctx, (int)KEY_SLASH, "KEY_SLASH");
    dukglue_register_global(ctx, (int)KEY_ZERO, "KEY_ZERO");
    dukglue_register_global(ctx, (int)KEY_ONE, "KEY_ONE");
    dukglue_register_global(ctx, (int)KEY_TWO, "KEY_TWO");
    dukglue_register_global(ctx, (int)KEY_THREE, "KEY_THREE");
    dukglue_register_global(ctx, (int)KEY_FOUR, "KEY_FOUR");
    dukglue_register_global(ctx, (int)KEY_FIVE, "KEY_FIVE");
    dukglue_register_global(ctx, (int)KEY_SIX, "KEY_SIX");
    dukglue_register_global(ctx, (int)KEY_SEVEN, "KEY_SEVEN");
    dukglue_register_global(ctx, (int)KEY_EIGHT, "KEY_EIGHT");
    dukglue_register_global(ctx, (int)KEY_NINE, "KEY_NINE");
    dukglue_register_global(ctx, (int)KEY_SEMICOLON, "KEY_SEMICOLON");
    dukglue_register_global(ctx, (int)KEY_EQUAL, "KEY_EQUAL");
    dukglue_register_global(ctx, (int)KEY_A, "KEY_A");
    dukglue_register_global(ctx, (int)KEY_B, "KEY_B");
    dukglue_register_global(ctx, (int)KEY_C, "KEY_C");
    dukglue_register_global(ctx, (int)KEY_D, "KEY_D");
    dukglue_register_global(ctx, (int)KEY_E, "KEY_E");
    dukglue_register_global(ctx, (int)KEY_F, "KEY_F");
    dukglue_register_global(ctx, (int)KEY_G, "KEY_G");
    dukglue_register_global(ctx, (int)KEY_H, "KEY_H");
    dukglue_register_global(ctx, (int)KEY_I, "KEY_I");
    dukglue_register_global(ctx, (int)KEY_J, "KEY_J");
    dukglue_register_global(ctx, (int)KEY_K, "KEY_K");
    dukglue_register_global(ctx, (int)KEY_L, "KEY_L");
    dukglue_register_global(ctx, (int)KEY_M, "KEY_M");
    dukglue_register_global(ctx, (int)KEY_N, "KEY_N");
    dukglue_register_global(ctx, (int)KEY_O, "KEY_O");
    dukglue_register_global(ctx, (int)KEY_P, "KEY_P");
    dukglue_register_global(ctx, (int)KEY_Q, "KEY_Q");
    dukglue_register_global(ctx, (int)KEY_R, "KEY_R");
    dukglue_register_global(ctx, (int)KEY_S, "KEY_S");
    dukglue_register_global(ctx, (int)KEY_T, "KEY_T");
    dukglue_register_global(ctx, (int)KEY_U, "KEY_U");
    dukglue_register_global(ctx, (int)KEY_V, "KEY_V");
    dukglue_register_global(ctx, (int)KEY_W, "KEY_W");
    dukglue_register_global(ctx, (int)KEY_X, "KEY_X");
    dukglue_register_global(ctx, (int)KEY_Y, "KEY_Y");
    dukglue_register_global(ctx, (int)KEY_Z, "KEY_Z");
    dukglue_register_global(ctx, (int)KEY_LEFT_BRACKET, "KEY_LEFT_BRACKET");
    dukglue_register_global(ctx, (int)KEY_BACKSLASH, "KEY_BACKSLASH");
    dukglue_register_global(ctx, (int)KEY_RIGHT_BRACKET, "KEY_RIGHT_BRACKET");
    dukglue_register_global(ctx, (int)KEY_GRAVE, "KEY_GRAVE");
    dukglue_register_global(ctx, (int)KEY_SPACE, "KEY_SPACE");
    dukglue_register_global(ctx, (int)KEY_ESCAPE, "KEY_ESCAPE");
    dukglue_register_global(ctx, (int)KEY_ENTER, "KEY_ENTER");
    dukglue_register_global(ctx, (int)KEY_TAB, "KEY_TAB");
    dukglue_register_global(ctx, (int)KEY_BACKSPACE, "KEY_BACKSPACE");
    dukglue_register_global(ctx, (int)KEY_INSERT, "KEY_INSERT");
    dukglue_register_global(ctx, (int)KEY_DELETE, "KEY_DELETE");
    dukglue_register_global(ctx, (int)KEY_RIGHT, "KEY_RIGHT");
    dukglue_register_global(ctx, (int)KEY_LEFT, "KEY_LEFT");
    dukglue_register_global(ctx, (int)KEY_DOWN, "KEY_DOWN");
    dukglue_register_global(ctx, (int)KEY_UP, "KEY_UP");
    dukglue_register_global(ctx, (int)KEY_PAGE_UP, "KEY_PAGE_UP");
    dukglue_register_global(ctx, (int)KEY_PAGE_DOWN, "KEY_PAGE_DOWN");
    dukglue_register_global(ctx, (int)KEY_HOME, "KEY_HOME");
    dukglue_register_global(ctx, (int)KEY_END, "KEY_END");
    dukglue_register_global(ctx, (int)KEY_CAPS_LOCK, "KEY_CAPS_LOCK");
    dukglue_register_global(ctx, (int)KEY_SCROLL_LOCK, "KEY_SCROLL_LOCK");
    dukglue_register_global(ctx, (int)KEY_NUM_LOCK, "KEY_NUM_LOCK");
    dukglue_register_global(ctx, (int)KEY_PRINT_SCREEN, "KEY_PRINT_SCREEN");
    dukglue_register_global(ctx, (int)KEY_PAUSE, "KEY_PAUSE");
    dukglue_register_global(ctx, (int)KEY_F1, "KEY_F1");
    dukglue_register_global(ctx, (int)KEY_F2, "KEY_F2");
    dukglue_register_global(ctx, (int)KEY_F3, "KEY_F3");
    dukglue_register_global(ctx, (int)KEY_F4, "KEY_F4");
    dukglue_register_global(ctx, (int)KEY_F5, "KEY_F5");
    dukglue_register_global(ctx, (int)KEY_F6, "KEY_F6");
    dukglue_register_global(ctx, (int)KEY_F7, "KEY_F7");
    dukglue_register_global(ctx, (int)KEY_F8, "KEY_F8");
    dukglue_register_global(ctx, (int)KEY_F9, "KEY_F9");
    dukglue_register_global(ctx, (int)KEY_F10, "KEY_F10");
    dukglue_register_global(ctx, (int)KEY_F11, "KEY_F11");
    dukglue_register_global(ctx, (int)KEY_F12, "KEY_F12");
    dukglue_register_global(ctx, (int)KEY_LEFT_SHIFT, "KEY_LEFT_SHIFT");
    dukglue_register_global(ctx, (int)KEY_LEFT_CONTROL, "KEY_LEFT_CONTROL");
    dukglue_register_global(ctx, (int)KEY_LEFT_ALT, "KEY_LEFT_ALT");
    dukglue_register_global(ctx, (int)KEY_LEFT_SUPER, "KEY_LEFT_SUPER");
    dukglue_register_global(ctx, (int)KEY_RIGHT_SHIFT, "KEY_RIGHT_SHIFT");
    dukglue_register_global(ctx, (int)KEY_RIGHT_CONTROL, "KEY_RIGHT_CONTROL");
    dukglue_register_global(ctx, (int)KEY_RIGHT_ALT, "KEY_RIGHT_ALT");
    dukglue_register_global(ctx, (int)KEY_RIGHT_SUPER, "KEY_RIGHT_SUPER");
    dukglue_register_global(ctx, (int)KEY_KB_MENU, "KEY_KB_MENU");
    dukglue_register_global(ctx, (int)KEY_KP_0, "KEY_KP_0");
    dukglue_register_global(ctx, (int)KEY_KP_1, "KEY_KP_1");
    dukglue_register_global(ctx, (int)KEY_KP_2, "KEY_KP_2");
    dukglue_register_global(ctx, (int)KEY_KP_3, "KEY_KP_3");
    dukglue_register_global(ctx, (int)KEY_KP_4, "KEY_KP_4");
    dukglue_register_global(ctx, (int)KEY_KP_5, "KEY_KP_5");
    dukglue_register_global(ctx, (int)KEY_KP_6, "KEY_KP_6");
    dukglue_register_global(ctx, (int)KEY_KP_7, "KEY_KP_7");
    dukglue_register_global(ctx, (int)KEY_KP_8, "KEY_KP_8");
    dukglue_register_global(ctx, (int)KEY_KP_9, "KEY_KP_9");
    dukglue_register_global(ctx, (int)KEY_KP_DECIMAL, "KEY_KP_DECIMAL");
    dukglue_register_global(ctx, (int)KEY_KP_DIVIDE, "KEY_KP_DIVIDE");
    dukglue_register_global(ctx, (int)KEY_KP_MULTIPLY, "KEY_KP_MULTIPLY");
    dukglue_register_global(ctx, (int)KEY_KP_SUBTRACT, "KEY_KP_SUBTRACT");
    dukglue_register_global(ctx, (int)KEY_KP_ADD, "KEY_KP_ADD");
    dukglue_register_global(ctx, (int)KEY_KP_ENTER, "KEY_KP_ENTER");
    dukglue_register_global(ctx, (int)KEY_KP_EQUAL, "KEY_KP_EQUAL");
    dukglue_register_global(ctx, (int)KEY_BACK, "KEY_BACK");
    dukglue_register_global(ctx, (int)KEY_MENU, "KEY_MENU");
    dukglue_register_global(ctx, (int)KEY_VOLUME_UP, "KEY_VOLUME_UP");
    dukglue_register_global(ctx, (int)KEY_VOLUME_DOWN, "KEY_VOLUME_DOWN");

    // MouseButton
    dukglue_register_global(ctx, (int)MOUSE_BUTTON_LEFT, "MOUSE_BUTTON_LEFT");
    dukglue_register_global(ctx, (int)MOUSE_BUTTON_RIGHT, "MOUSE_BUTTON_RIGHT");
    dukglue_register_global(ctx, (int)MOUSE_BUTTON_MIDDLE, "MOUSE_BUTTON_MIDDLE");
    dukglue_register_global(ctx, (int)MOUSE_BUTTON_SIDE, "MOUSE_BUTTON_SIDE");
    dukglue_register_global(ctx, (int)MOUSE_BUTTON_EXTRA, "MOUSE_BUTTON_EXTRA");
    dukglue_register_global(ctx, (int)MOUSE_BUTTON_FORWARD, "MOUSE_BUTTON_FORWARD");
    dukglue_register_global(ctx, (int)MOUSE_BUTTON_BACK, "MOUSE_BUTTON_BACK");

    // MouseCursor
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_DEFAULT, "MOUSE_CURSOR_DEFAULT");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_ARROW, "MOUSE_CURSOR_ARROW");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_IBEAM, "MOUSE_CURSOR_IBEAM");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_CROSSHAIR, "MOUSE_CURSOR_CROSSHAIR");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_POINTING_HAND, "MOUSE_CURSOR_POINTING_HAND");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_RESIZE_EW, "MOUSE_CURSOR_RESIZE_EW");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_RESIZE_NS, "MOUSE_CURSOR_RESIZE_NS");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_RESIZE_NWSE, "MOUSE_CURSOR_RESIZE_NWSE");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_RESIZE_NESW, "MOUSE_CURSOR_RESIZE_NESW");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_RESIZE_ALL, "MOUSE_CURSOR_RESIZE_ALL");
    dukglue_register_global(ctx, (int)MOUSE_CURSOR_NOT_ALLOWED, "MOUSE_CURSOR_NOT_ALLOWED");

    // GamepadButton
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_UNKNOWN, "GAMEPAD_BUTTON_UNKNOWN");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_LEFT_FACE_UP, "GAMEPAD_BUTTON_LEFT_FACE_UP");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_LEFT_FACE_RIGHT, "GAMEPAD_BUTTON_LEFT_FACE_RIGHT");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_LEFT_FACE_DOWN, "GAMEPAD_BUTTON_LEFT_FACE_DOWN");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_LEFT_FACE_LEFT, "GAMEPAD_BUTTON_LEFT_FACE_LEFT");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_RIGHT_FACE_UP, "GAMEPAD_BUTTON_RIGHT_FACE_UP");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_RIGHT_FACE_RIGHT, "GAMEPAD_BUTTON_RIGHT_FACE_RIGHT");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_RIGHT_FACE_DOWN, "GAMEPAD_BUTTON_RIGHT_FACE_DOWN");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_RIGHT_FACE_LEFT, "GAMEPAD_BUTTON_RIGHT_FACE_LEFT");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_LEFT_TRIGGER_1, "GAMEPAD_BUTTON_LEFT_TRIGGER_1");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_LEFT_TRIGGER_2, "GAMEPAD_BUTTON_LEFT_TRIGGER_2");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_RIGHT_TRIGGER_1, "GAMEPAD_BUTTON_RIGHT_TRIGGER_1");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_RIGHT_TRIGGER_2, "GAMEPAD_BUTTON_RIGHT_TRIGGER_2");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_MIDDLE_LEFT, "GAMEPAD_BUTTON_MIDDLE_LEFT");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_MIDDLE, "GAMEPAD_BUTTON_MIDDLE");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_MIDDLE_RIGHT, "GAMEPAD_BUTTON_MIDDLE_RIGHT");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_LEFT_THUMB, "GAMEPAD_BUTTON_LEFT_THUMB");
    dukglue_register_global(ctx, (int)GAMEPAD_BUTTON_RIGHT_THUMB, "GAMEPAD_BUTTON_RIGHT_THUMB");

    // GamepadAxis
    dukglue_register_global(ctx, (int)GAMEPAD_AXIS_LEFT_X, "GAMEPAD_AXIS_LEFT_X");
    dukglue_register_global(ctx, (int)GAMEPAD_AXIS_LEFT_Y, "GAMEPAD_AXIS_LEFT_Y");
    dukglue_register_global(ctx, (int)GAMEPAD_AXIS_RIGHT_X, "GAMEPAD_AXIS_RIGHT_X");
    dukglue_register_global(ctx, (int)GAMEPAD_AXIS_RIGHT_Y, "GAMEPAD_AXIS_RIGHT_Y");
    dukglue_register_global(ctx, (int)GAMEPAD_AXIS_LEFT_TRIGGER, "GAMEPAD_AXIS_LEFT_TRIGGER");
    dukglue_register_global(ctx, (int)GAMEPAD_AXIS_RIGHT_TRIGGER, "GAMEPAD_AXIS_RIGHT_TRIGGER");

    // MaterialMapIndex
    dukglue_register_global(ctx, (int)MATERIAL_MAP_ALBEDO, "MATERIAL_MAP_ALBEDO");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_METALNESS, "MATERIAL_MAP_METALNESS");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_NORMAL, "MATERIAL_MAP_NORMAL");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_ROUGHNESS, "MATERIAL_MAP_ROUGHNESS");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_OCCLUSION, "MATERIAL_MAP_OCCLUSION");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_EMISSION, "MATERIAL_MAP_EMISSION");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_HEIGHT, "MATERIAL_MAP_HEIGHT");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_CUBEMAP, "MATERIAL_MAP_CUBEMAP");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_IRRADIANCE, "MATERIAL_MAP_IRRADIANCE");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_PREFILTER, "MATERIAL_MAP_PREFILTER");
    dukglue_register_global(ctx, (int)MATERIAL_MAP_BRDF, "MATERIAL_MAP_BRDF");

    // ShaderLocationIndex
    dukglue_register_global(ctx, (int)SHADER_LOC_VERTEX_POSITION, "SHADER_LOC_VERTEX_POSITION");
    dukglue_register_global(ctx, (int)SHADER_LOC_VERTEX_TEXCOORD01, "SHADER_LOC_VERTEX_TEXCOORD01");
    dukglue_register_global(ctx, (int)SHADER_LOC_VERTEX_TEXCOORD02, "SHADER_LOC_VERTEX_TEXCOORD02");
    dukglue_register_global(ctx, (int)SHADER_LOC_VERTEX_NORMAL, "SHADER_LOC_VERTEX_NORMAL");
    dukglue_register_global(ctx, (int)SHADER_LOC_VERTEX_TANGENT, "SHADER_LOC_VERTEX_TANGENT");
    dukglue_register_global(ctx, (int)SHADER_LOC_VERTEX_COLOR, "SHADER_LOC_VERTEX_COLOR");
    dukglue_register_global(ctx, (int)SHADER_LOC_MATRIX_MVP, "SHADER_LOC_MATRIX_MVP");
    dukglue_register_global(ctx, (int)SHADER_LOC_MATRIX_VIEW, "SHADER_LOC_MATRIX_VIEW");
    dukglue_register_global(ctx, (int)SHADER_LOC_MATRIX_PROJECTION, "SHADER_LOC_MATRIX_PROJECTION");
    dukglue_register_global(ctx, (int)SHADER_LOC_MATRIX_MODEL, "SHADER_LOC_MATRIX_MODEL");
    dukglue_register_global(ctx, (int)SHADER_LOC_MATRIX_NORMAL, "SHADER_LOC_MATRIX_NORMAL");
    dukglue_register_global(ctx, (int)SHADER_LOC_VECTOR_VIEW, "SHADER_LOC_VECTOR_VIEW");
    dukglue_register_global(ctx, (int)SHADER_LOC_COLOR_DIFFUSE, "SHADER_LOC_COLOR_DIFFUSE");
    dukglue_register_global(ctx, (int)SHADER_LOC_COLOR_SPECULAR, "SHADER_LOC_COLOR_SPECULAR");
    dukglue_register_global(ctx, (int)SHADER_LOC_COLOR_AMBIENT, "SHADER_LOC_COLOR_AMBIENT");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_ALBEDO, "SHADER_LOC_MAP_ALBEDO");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_METALNESS, "SHADER_LOC_MAP_METALNESS");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_NORMAL, "SHADER_LOC_MAP_NORMAL");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_ROUGHNESS, "SHADER_LOC_MAP_ROUGHNESS");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_OCCLUSION, "SHADER_LOC_MAP_OCCLUSION");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_EMISSION, "SHADER_LOC_MAP_EMISSION");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_HEIGHT, "SHADER_LOC_MAP_HEIGHT");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_CUBEMAP, "SHADER_LOC_MAP_CUBEMAP");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_IRRADIANCE, "SHADER_LOC_MAP_IRRADIANCE");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_PREFILTER, "SHADER_LOC_MAP_PREFILTER");
    dukglue_register_global(ctx, (int)SHADER_LOC_MAP_BRDF, "SHADER_LOC_MAP_BRDF");

    // ShaderUniformDataType
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_FLOAT, "SHADER_UNIFORM_FLOAT");
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_VEC2, "SHADER_UNIFORM_VEC2");
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_VEC3, "SHADER_UNIFORM_VEC3");
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_VEC4, "SHADER_UNIFORM_VEC4");
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_INT, "SHADER_UNIFORM_INT");
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_IVEC2, "SHADER_UNIFORM_IVEC2");
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_IVEC3, "SHADER_UNIFORM_IVEC3");
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_IVEC4, "SHADER_UNIFORM_IVEC4");
    dukglue_register_global(ctx, (int)SHADER_UNIFORM_SAMPLER2D, "SHADER_UNIFORM_SAMPLER2D");

    // ShaderAttributeDataType
    dukglue_register_global(ctx, (int)SHADER_ATTRIB_FLOAT, "SHADER_ATTRIB_FLOAT");
    dukglue_register_global(ctx, (int)SHADER_ATTRIB_VEC2, "SHADER_ATTRIB_VEC2");
    dukglue_register_global(ctx, (int)SHADER_ATTRIB_VEC3, "SHADER_ATTRIB_VEC3");
    dukglue_register_global(ctx, (int)SHADER_ATTRIB_VEC4, "SHADER_ATTRIB_VEC4");

    // PixelFormat
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_GRAYSCALE, "PIXELFORMAT_UNCOMPRESSED_GRAYSCALE");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA, "PIXELFORMAT_UNCOMPRESSED_GRAY_ALPHA");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_R5G6B5, "PIXELFORMAT_UNCOMPRESSED_R5G6B5");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_R8G8B8, "PIXELFORMAT_UNCOMPRESSED_R8G8B8");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_R5G5B5A1, "PIXELFORMAT_UNCOMPRESSED_R5G5B5A1");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_R4G4B4A4, "PIXELFORMAT_UNCOMPRESSED_R4G4B4A4");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_R8G8B8A8, "PIXELFORMAT_UNCOMPRESSED_R8G8B8A8");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_R32, "PIXELFORMAT_UNCOMPRESSED_R32");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_R32G32B32, "PIXELFORMAT_UNCOMPRESSED_R32G32B32");
    dukglue_register_global(ctx, (int)PIXELFORMAT_UNCOMPRESSED_R32G32B32A32, "PIXELFORMAT_UNCOMPRESSED_R32G32B32A32");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_DXT1_RGB, "PIXELFORMAT_COMPRESSED_DXT1_RGB");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_DXT1_RGBA, "PIXELFORMAT_COMPRESSED_DXT1_RGBA");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_DXT3_RGBA, "PIXELFORMAT_COMPRESSED_DXT3_RGBA");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_DXT5_RGBA, "PIXELFORMAT_COMPRESSED_DXT5_RGBA");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_ETC1_RGB, "PIXELFORMAT_COMPRESSED_ETC1_RGB");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_ETC2_RGB, "PIXELFORMAT_COMPRESSED_ETC2_RGB");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA, "PIXELFORMAT_COMPRESSED_ETC2_EAC_RGBA");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_PVRT_RGB, "PIXELFORMAT_COMPRESSED_PVRT_RGB");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_PVRT_RGBA, "PIXELFORMAT_COMPRESSED_PVRT_RGBA");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA, "PIXELFORMAT_COMPRESSED_ASTC_4x4_RGBA");
    dukglue_register_global(ctx, (int)PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA, "PIXELFORMAT_COMPRESSED_ASTC_8x8_RGBA");

    // TextureFilter
    dukglue_register_global(ctx, (int)TEXTURE_FILTER_POINT, "TEXTURE_FILTER_POINT");
    dukglue_register_global(ctx, (int)TEXTURE_FILTER_BILINEAR, "TEXTURE_FILTER_BILINEAR");
    dukglue_register_global(ctx, (int)TEXTURE_FILTER_TRILINEAR, "TEXTURE_FILTER_TRILINEAR");
    dukglue_register_global(ctx, (int)TEXTURE_FILTER_ANISOTROPIC_4X, "TEXTURE_FILTER_ANISOTROPIC_4X");
    dukglue_register_global(ctx, (int)TEXTURE_FILTER_ANISOTROPIC_8X, "TEXTURE_FILTER_ANISOTROPIC_8X");
    dukglue_register_global(ctx, (int)TEXTURE_FILTER_ANISOTROPIC_16X, "TEXTURE_FILTER_ANISOTROPIC_16X");

    // TextureWrap
    dukglue_register_global(ctx, (int)TEXTURE_WRAP_REPEAT, "TEXTURE_WRAP_REPEAT");
    dukglue_register_global(ctx, (int)TEXTURE_WRAP_CLAMP, "TEXTURE_WRAP_CLAMP");
    dukglue_register_global(ctx, (int)TEXTURE_WRAP_MIRROR_REPEAT, "TEXTURE_WRAP_MIRROR_REPEAT");
    dukglue_register_global(ctx, (int)TEXTURE_WRAP_MIRROR_CLAMP, "TEXTURE_WRAP_MIRROR_CLAMP");

    // CubemapLayout
    dukglue_register_global(ctx, (int)CUBEMAP_LAYOUT_AUTO_DETECT, "CUBEMAP_LAYOUT_AUTO_DETECT");
    dukglue_register_global(ctx, (int)CUBEMAP_LAYOUT_LINE_VERTICAL, "CUBEMAP_LAYOUT_LINE_VERTICAL");
    dukglue_register_global(ctx, (int)CUBEMAP_LAYOUT_LINE_HORIZONTAL, "CUBEMAP_LAYOUT_LINE_HORIZONTAL");
    dukglue_register_global(ctx, (int)CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR, "CUBEMAP_LAYOUT_CROSS_THREE_BY_FOUR");
    dukglue_register_global(ctx, (int)CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE, "CUBEMAP_LAYOUT_CROSS_FOUR_BY_THREE");
    dukglue_register_global(ctx, (int)CUBEMAP_LAYOUT_PANORAMA, "CUBEMAP_LAYOUT_PANORAMA");

    // FontType
    dukglue_register_global(ctx, (int)FONT_DEFAULT, "FONT_DEFAULT");
    dukglue_register_global(ctx, (int)FONT_BITMAP, "FONT_BITMAP");
    dukglue_register_global(ctx, (int)FONT_SDF, "FONT_SDF");

    // BlendMode
    dukglue_register_global(ctx, (int)BLEND_ALPHA, "BLEND_ALPHA");
    dukglue_register_global(ctx, (int)BLEND_ADDITIVE, "BLEND_ADDITIVE");
    dukglue_register_global(ctx, (int)BLEND_MULTIPLIED, "BLEND_MULTIPLIED");
    dukglue_register_global(ctx, (int)BLEND_ADD_COLORS, "BLEND_ADD_COLORS");
    dukglue_register_global(ctx, (int)BLEND_SUBTRACT_COLORS, "BLEND_SUBTRACT_COLORS");
    dukglue_register_global(ctx, (int)BLEND_ALPHA_PREMULTIPLY, "BLEND_ALPHA_PREMULTIPLY");
    dukglue_register_global(ctx, (int)BLEND_CUSTOM, "BLEND_CUSTOM");

    // Gesture
    dukglue_register_global(ctx, (int)GESTURE_NONE, "GESTURE_NONE");
    dukglue_register_global(ctx, (int)GESTURE_TAP, "GESTURE_TAP");
    dukglue_register_global(ctx, (int)GESTURE_DOUBLETAP, "GESTURE_DOUBLETAP");
    dukglue_register_global(ctx, (int)GESTURE_HOLD, "GESTURE_HOLD");
    dukglue_register_global(ctx, (int)GESTURE_DRAG, "GESTURE_DRAG");
    dukglue_register_global(ctx, (int)GESTURE_SWIPE_RIGHT, "GESTURE_SWIPE_RIGHT");
    dukglue_register_global(ctx, (int)GESTURE_SWIPE_LEFT, "GESTURE_SWIPE_LEFT");
    dukglue_register_global(ctx, (int)GESTURE_SWIPE_UP, "GESTURE_SWIPE_UP");
    dukglue_register_global(ctx, (int)GESTURE_SWIPE_DOWN, "GESTURE_SWIPE_DOWN");
    dukglue_register_global(ctx, (int)GESTURE_PINCH_IN, "GESTURE_PINCH_IN");
    dukglue_register_global(ctx, (int)GESTURE_PINCH_OUT, "GESTURE_PINCH_OUT");

    // CameraMode
    dukglue_register_global(ctx, (int)CAMERA_CUSTOM, "CAMERA_CUSTOM");
    dukglue_register_global(ctx, (int)CAMERA_FREE, "CAMERA_FREE");
    dukglue_register_global(ctx, (int)CAMERA_ORBITAL, "CAMERA_ORBITAL");
    dukglue_register_global(ctx, (int)CAMERA_FIRST_PERSON, "CAMERA_FIRST_PERSON");
    dukglue_register_global(ctx, (int)CAMERA_THIRD_PERSON, "CAMERA_THIRD_PERSON");

    // CameraProjection
    dukglue_register_global(ctx, (int)CAMERA_PERSPECTIVE, "CAMERA_PERSPECTIVE");
    dukglue_register_global(ctx, (int)CAMERA_ORTHOGRAPHIC, "CAMERA_ORTHOGRAPHIC");

    // NPatchLayout
    dukglue_register_global(ctx, (int)NPATCH_NINE_PATCH, "NPATCH_NINE_PATCH");
    dukglue_register_global(ctx, (int)NPATCH_THREE_PATCH_VERTICAL, "NPATCH_THREE_PATCH_VERTICAL");
    dukglue_register_global(ctx, (int)NPATCH_THREE_PATCH_HORIZONTAL, "NPATCH_THREE_PATCH_HORIZONTAL");

    // Custom
    dukglue_register_global(ctx, (int)MOUSE_LEFT_BUTTON, "MOUSE_LEFT_BUTTON");
    dukglue_register_global(ctx, (int)MOUSE_RIGHT_BUTTON, "MOUSE_RIGHT_BUTTON");
    dukglue_register_global(ctx, (int)MOUSE_MIDDLE_BUTTON, "MOUSE_MIDDLE_BUTTON");

    // Skipped: RAYLIB_H
    // Skipped: RAYLIB_VERSION
    // Skipped: __declspec(x)
    // Skipped: RLAPI
    dukglue_register_global(ctx, PI, "PI");
    // Skipped: DEG2RAD
    // Skipped: RAD2DEG
    // Skipped: RL_MALLOC(sz)
    // Skipped: RL_CALLOC(n,sz)
    // Skipped: RL_REALLOC(ptr,sz)
    // Skipped: RL_FREE(ptr)
    // Skipped: CLITERAL(type)
    // Skipped: RL_COLOR_TYPE
    // Skipped: RL_RECTANGLE_TYPE
    // Skipped: RL_VECTOR2_TYPE
    // Skipped: RL_VECTOR3_TYPE
    // Skipped: RL_VECTOR4_TYPE
    // Skipped: RL_QUATERNION_TYPE
    // Skipped: RL_MATRIX_TYPE
    dukglue_register_global(ctx, LIGHTGRAY, "LIGHTGRAY");
    dukglue_register_global(ctx, GRAY, "GRAY");
    dukglue_register_global(ctx, DARKGRAY, "DARKGRAY");
    dukglue_register_global(ctx, YELLOW, "YELLOW");
    dukglue_register_global(ctx, GOLD, "GOLD");
    dukglue_register_global(ctx, ORANGE, "ORANGE");
    dukglue_register_global(ctx, PINK, "PINK");
    dukglue_register_global(ctx, RED, "RED");
    dukglue_register_global(ctx, MAROON, "MAROON");
    dukglue_register_global(ctx, GREEN, "GREEN");
    dukglue_register_global(ctx, LIME, "LIME");
    dukglue_register_global(ctx, DARKGREEN, "DARKGREEN");
    dukglue_register_global(ctx, SKYBLUE, "SKYBLUE");
    dukglue_register_global(ctx, BLUE, "BLUE");
    dukglue_register_global(ctx, DARKBLUE, "DARKBLUE");
    dukglue_register_global(ctx, PURPLE, "PURPLE");
    dukglue_register_global(ctx, VIOLET, "VIOLET");
    dukglue_register_global(ctx, DARKPURPLE, "DARKPURPLE");
    dukglue_register_global(ctx, BEIGE, "BEIGE");
    dukglue_register_global(ctx, BROWN, "BROWN");
    dukglue_register_global(ctx, DARKBROWN, "DARKBROWN");
    dukglue_register_global(ctx, WHITE, "WHITE");
    dukglue_register_global(ctx, BLACK, "BLACK");
    dukglue_register_global(ctx, BLANK, "BLANK");
    dukglue_register_global(ctx, MAGENTA, "MAGENTA");
    dukglue_register_global(ctx, RAYWHITE, "RAYWHITE");
    // Skipped: RL_BOOL_TYPE
    // Skipped: MOUSE_LEFT_BUTTON
    // Skipped: MOUSE_RIGHT_BUTTON
    // Skipped: MOUSE_MIDDLE_BUTTON
    // Skipped: MATERIAL_MAP_DIFFUSE
    // Skipped: MATERIAL_MAP_SPECULAR
    // Skipped: SHADER_LOC_MAP_DIFFUSE
    // Skipped: SHADER_LOC_MAP_SPECULAR
    dukglue_register_function(ctx, &InitWindow, "InitWindow");
    dukglue_register_function(ctx, &WindowShouldClose, "WindowShouldClose");
    dukglue_register_function(ctx, &CloseWindow, "CloseWindow");
    dukglue_register_function(ctx, &IsWindowReady, "IsWindowReady");
    dukglue_register_function(ctx, &IsWindowFullscreen, "IsWindowFullscreen");
    dukglue_register_function(ctx, &IsWindowHidden, "IsWindowHidden");
    dukglue_register_function(ctx, &IsWindowMinimized, "IsWindowMinimized");
    dukglue_register_function(ctx, &IsWindowMaximized, "IsWindowMaximized");
    dukglue_register_function(ctx, &IsWindowFocused, "IsWindowFocused");
    dukglue_register_function(ctx, &IsWindowResized, "IsWindowResized");
    dukglue_register_function(ctx, &IsWindowState, "IsWindowState");
    dukglue_register_function(ctx, &SetWindowState, "SetWindowState");
    dukglue_register_function(ctx, &ClearWindowState, "ClearWindowState");
    dukglue_register_function(ctx, &ToggleFullscreen, "ToggleFullscreen");
    dukglue_register_function(ctx, &MaximizeWindow, "MaximizeWindow");
    dukglue_register_function(ctx, &MinimizeWindow, "MinimizeWindow");
    dukglue_register_function(ctx, &RestoreWindow, "RestoreWindow");
    dukglue_register_function(ctx, &SetWindowIcon, "SetWindowIcon");
    dukglue_register_function(ctx, &SetWindowTitle, "SetWindowTitle");
    dukglue_register_function(ctx, &SetWindowPosition, "SetWindowPosition");
    dukglue_register_function(ctx, &SetWindowMonitor, "SetWindowMonitor");
    dukglue_register_function(ctx, &SetWindowMinSize, "SetWindowMinSize");
    dukglue_register_function(ctx, &SetWindowSize, "SetWindowSize");
    dukglue_register_function(ctx, &SetWindowOpacity, "SetWindowOpacity");
    // Skipped: GetWindowHandle
    dukglue_register_function(ctx, &GetScreenWidth, "GetScreenWidth");
    dukglue_register_function(ctx, &GetScreenHeight, "GetScreenHeight");
    dukglue_register_function(ctx, &GetRenderWidth, "GetRenderWidth");
    dukglue_register_function(ctx, &GetRenderHeight, "GetRenderHeight");
    dukglue_register_function(ctx, &GetMonitorCount, "GetMonitorCount");
    dukglue_register_function(ctx, &GetCurrentMonitor, "GetCurrentMonitor");
    dukglue_register_function(ctx, &GetMonitorPosition, "GetMonitorPosition");
    dukglue_register_function(ctx, &GetMonitorWidth, "GetMonitorWidth");
    dukglue_register_function(ctx, &GetMonitorHeight, "GetMonitorHeight");
    dukglue_register_function(ctx, &GetMonitorPhysicalWidth, "GetMonitorPhysicalWidth");
    dukglue_register_function(ctx, &GetMonitorPhysicalHeight, "GetMonitorPhysicalHeight");
    dukglue_register_function(ctx, &GetMonitorRefreshRate, "GetMonitorRefreshRate");
    dukglue_register_function(ctx, &GetWindowPosition, "GetWindowPosition");
    dukglue_register_function(ctx, &GetWindowScaleDPI, "GetWindowScaleDPI");
    dukglue_register_function(ctx, &GetMonitorName, "GetMonitorName");
    dukglue_register_function(ctx, &SetClipboardText, "SetClipboardText");
    dukglue_register_function(ctx, &GetClipboardText, "GetClipboardText");
    dukglue_register_function(ctx, &EnableEventWaiting, "EnableEventWaiting");
    dukglue_register_function(ctx, &DisableEventWaiting, "DisableEventWaiting");
    dukglue_register_function(ctx, &SwapScreenBuffer, "SwapScreenBuffer");
    dukglue_register_function(ctx, &PollInputEvents, "PollInputEvents");
    dukglue_register_function(ctx, &WaitTime, "WaitTime");
    dukglue_register_function(ctx, &ShowCursor, "ShowCursor");
    dukglue_register_function(ctx, &HideCursor, "HideCursor");
    dukglue_register_function(ctx, &IsCursorHidden, "IsCursorHidden");
    dukglue_register_function(ctx, &EnableCursor, "EnableCursor");
    dukglue_register_function(ctx, &DisableCursor, "DisableCursor");
    dukglue_register_function(ctx, &IsCursorOnScreen, "IsCursorOnScreen");
    dukglue_register_function(ctx, &ClearBackground, "ClearBackground");
    dukglue_register_function(ctx, &BeginDrawing, "BeginDrawing");
    dukglue_register_function(ctx, &EndDrawing, "EndDrawing");
    dukglue_register_function(ctx, &BeginMode2D, "BeginMode2D");
    dukglue_register_function(ctx, &EndMode2D, "EndMode2D");
    dukglue_register_function(ctx, &BeginMode3D, "BeginMode3D");
    dukglue_register_function(ctx, &EndMode3D, "EndMode3D");
    dukglue_register_function(ctx, &BeginTextureMode, "BeginTextureMode");
    dukglue_register_function(ctx, &EndTextureMode, "EndTextureMode");
    dukglue_register_function(ctx, &BeginShaderMode, "BeginShaderMode");
    dukglue_register_function(ctx, &EndShaderMode, "EndShaderMode");
    dukglue_register_function(ctx, &BeginBlendMode, "BeginBlendMode");
    dukglue_register_function(ctx, &EndBlendMode, "EndBlendMode");
    dukglue_register_function(ctx, &BeginScissorMode, "BeginScissorMode");
    dukglue_register_function(ctx, &EndScissorMode, "EndScissorMode");
    dukglue_register_function(ctx, &BeginVrStereoMode, "BeginVrStereoMode");
    dukglue_register_function(ctx, &EndVrStereoMode, "EndVrStereoMode");
    dukglue_register_function(ctx, &LoadVrStereoConfig, "LoadVrStereoConfig");
    dukglue_register_function(ctx, &UnloadVrStereoConfig, "UnloadVrStereoConfig");
    dukglue_register_function(ctx, &LoadShader, "LoadShader");
    dukglue_register_function(ctx, &LoadShaderFromMemory, "LoadShaderFromMemory");
    dukglue_register_function(ctx, &GetShaderLocation, "GetShaderLocation");
    // Skipped: GetShaderLocationAttrib
    // Skipped: SetShaderValue
    // Skipped: SetShaderValueV
    // Skipped: SetShaderValueMatrix
    // Skipped: SetShaderValueTexture
    // Skipped: UnloadShader
    dukglue_register_function(ctx, &GetMouseRay, "GetMouseRay");
    dukglue_register_function(ctx, &GetCameraMatrix, "GetCameraMatrix");
    dukglue_register_function(ctx, &GetCameraMatrix2D, "GetCameraMatrix2D");
    dukglue_register_function(ctx, &GetWorldToScreen, "GetWorldToScreen");
    dukglue_register_function(ctx, &GetScreenToWorld2D, "GetScreenToWorld2D");
    dukglue_register_function(ctx, &GetWorldToScreenEx, "GetWorldToScreenEx");
    dukglue_register_function(ctx, &GetWorldToScreen2D, "GetWorldToScreen2D");
    dukglue_register_function(ctx, &SetTargetFPS, "SetTargetFPS");
    dukglue_register_function(ctx, &GetFPS, "GetFPS");
    dukglue_register_function(ctx, &GetFrameTime, "GetFrameTime");
    dukglue_register_function(ctx, &GetTime, "GetTime");
    dukglue_register_function(ctx, &GetRandomValue, "GetRandomValue");
    dukglue_register_function(ctx, &SetRandomSeed, "SetRandomSeed");
    dukglue_register_function(ctx, &TakeScreenshot, "TakeScreenshot");
    dukglue_register_function(ctx, &SetConfigFlags, "SetConfigFlags");
    // Skipped: TraceLog
    dukglue_register_function(ctx, &SetTraceLogLevel, "SetTraceLogLevel");
    // Skipped: MemAlloc
    // Skipped: MemRealloc
    // Skipped: MemFree
    dukglue_register_function(ctx, &OpenURL, "OpenURL");
    // Skipped: SetTraceLogCallback
    // Skipped: SetLoadFileDataCallback
    // Skipped: SetSaveFileDataCallback
    // Skipped: SetLoadFileTextCallback
    // Skipped: SetSaveFileTextCallback
    // Skipped: LoadFileData
    // Skipped: UnloadFileData
    // Skipped: SaveFileData
    dukglue_register_function(ctx, &ExportDataAsCode, "ExportDataAsCode");
    // Skipped: LoadFileText
    // Skipped: UnloadFileText
    // Skipped: SaveFileText
    dukglue_register_function(ctx, &FileExists, "FileExists");
    dukglue_register_function(ctx, &DirectoryExists, "DirectoryExists");
    dukglue_register_function(ctx, &IsFileExtension, "IsFileExtension");
    dukglue_register_function(ctx, &GetFileLength, "GetFileLength");
    dukglue_register_function(ctx, &GetFileExtension, "GetFileExtension");
    dukglue_register_function(ctx, &GetFileName, "GetFileName");
    dukglue_register_function(ctx, &GetFileNameWithoutExt, "GetFileNameWithoutExt");
    dukglue_register_function(ctx, &GetDirectoryPath, "GetDirectoryPath");
    dukglue_register_function(ctx, &GetPrevDirectoryPath, "GetPrevDirectoryPath");
    dukglue_register_function(ctx, &GetWorkingDirectory, "GetWorkingDirectory");
    dukglue_register_function(ctx, &GetApplicationDirectory, "GetApplicationDirectory");
    dukglue_register_function(ctx, &ChangeDirectory, "ChangeDirectory");
    dukglue_register_function(ctx, &IsPathFile, "IsPathFile");
    dukglue_register_function(ctx, &LoadDirectoryFiles, "LoadDirectoryFiles");
    dukglue_register_function(ctx, &LoadDirectoryFilesEx, "LoadDirectoryFilesEx");
    dukglue_register_function(ctx, &UnloadDirectoryFiles, "UnloadDirectoryFiles");
    dukglue_register_function(ctx, &IsFileDropped, "IsFileDropped");
    dukglue_register_function(ctx, &LoadDroppedFiles, "LoadDroppedFiles");
    dukglue_register_function(ctx, &UnloadDroppedFiles, "UnloadDroppedFiles");
    dukglue_register_function(ctx, &GetFileModTime, "GetFileModTime");
    // Skipped: CompressData
    // Skipped: DecompressData
    // Skipped: EncodeDataBase64
    // Skipped: DecodeDataBase64
    dukglue_register_function(ctx, &IsKeyPressed, "IsKeyPressed");
    dukglue_register_function(ctx, &IsKeyDown, "IsKeyDown");
    dukglue_register_function(ctx, &IsKeyReleased, "IsKeyReleased");
    dukglue_register_function(ctx, &IsKeyUp, "IsKeyUp");
    dukglue_register_function(ctx, &SetExitKey, "SetExitKey");
    dukglue_register_function(ctx, &GetKeyPressed, "GetKeyPressed");
    dukglue_register_function(ctx, &GetCharPressed, "GetCharPressed");
    dukglue_register_function(ctx, &IsGamepadAvailable, "IsGamepadAvailable");
    dukglue_register_function(ctx, &GetGamepadName, "GetGamepadName");
    dukglue_register_function(ctx, &IsGamepadButtonPressed, "IsGamepadButtonPressed");
    dukglue_register_function(ctx, &IsGamepadButtonDown, "IsGamepadButtonDown");
    dukglue_register_function(ctx, &IsGamepadButtonReleased, "IsGamepadButtonReleased");
    dukglue_register_function(ctx, &IsGamepadButtonUp, "IsGamepadButtonUp");
    dukglue_register_function(ctx, &GetGamepadButtonPressed, "GetGamepadButtonPressed");
    dukglue_register_function(ctx, &GetGamepadAxisCount, "GetGamepadAxisCount");
    dukglue_register_function(ctx, &GetGamepadAxisMovement, "GetGamepadAxisMovement");
    dukglue_register_function(ctx, &SetGamepadMappings, "SetGamepadMappings");
    dukglue_register_function(ctx, &IsMouseButtonPressed, "IsMouseButtonPressed");
    dukglue_register_function(ctx, &IsMouseButtonDown, "IsMouseButtonDown");
    dukglue_register_function(ctx, &IsMouseButtonReleased, "IsMouseButtonReleased");
    dukglue_register_function(ctx, &IsMouseButtonUp, "IsMouseButtonUp");
    dukglue_register_function(ctx, &GetMouseX, "GetMouseX");
    dukglue_register_function(ctx, &GetMouseY, "GetMouseY");
    dukglue_register_function(ctx, &GetMousePosition, "GetMousePosition");
    dukglue_register_function(ctx, &GetMouseDelta, "GetMouseDelta");
    dukglue_register_function(ctx, &SetMousePosition, "SetMousePosition");
    dukglue_register_function(ctx, &SetMouseOffset, "SetMouseOffset");
    dukglue_register_function(ctx, &SetMouseScale, "SetMouseScale");
    dukglue_register_function(ctx, &GetMouseWheelMove, "GetMouseWheelMove");
    dukglue_register_function(ctx, &GetMouseWheelMoveV, "GetMouseWheelMoveV");
    dukglue_register_function(ctx, &SetMouseCursor, "SetMouseCursor");
    dukglue_register_function(ctx, &GetTouchX, "GetTouchX");
    dukglue_register_function(ctx, &GetTouchY, "GetTouchY");
    dukglue_register_function(ctx, &GetTouchPosition, "GetTouchPosition");
    dukglue_register_function(ctx, &GetTouchPointId, "GetTouchPointId");
    dukglue_register_function(ctx, &GetTouchPointCount, "GetTouchPointCount");
    dukglue_register_function(ctx, &SetGesturesEnabled, "SetGesturesEnabled");
    dukglue_register_function(ctx, &IsGestureDetected, "IsGestureDetected");
    dukglue_register_function(ctx, &GetGestureDetected, "GetGestureDetected");
    dukglue_register_function(ctx, &GetGestureHoldDuration, "GetGestureHoldDuration");
    dukglue_register_function(ctx, &GetGestureDragVector, "GetGestureDragVector");
    dukglue_register_function(ctx, &GetGestureDragAngle, "GetGestureDragAngle");
    dukglue_register_function(ctx, &GetGesturePinchVector, "GetGesturePinchVector");
    dukglue_register_function(ctx, &GetGesturePinchAngle, "GetGesturePinchAngle");
    dukglue_register_function(ctx, &SetCameraMode, "SetCameraMode");
    // Skipped: UpdateCamera
    dukglue_register_function(ctx, &SetCameraPanControl, "SetCameraPanControl");
    dukglue_register_function(ctx, &SetCameraAltControl, "SetCameraAltControl");
    dukglue_register_function(ctx, &SetCameraSmoothZoomControl, "SetCameraSmoothZoomControl");
    dukglue_register_function(ctx, &SetCameraMoveControls, "SetCameraMoveControls");
    dukglue_register_function(ctx, &SetShapesTexture, "SetShapesTexture");
    dukglue_register_function(ctx, &DrawPixel, "DrawPixel");
    dukglue_register_function(ctx, &DrawPixelV, "DrawPixelV");
    dukglue_register_function(ctx, &DrawLine, "DrawLine");
    dukglue_register_function(ctx, &DrawLineV, "DrawLineV");
    dukglue_register_function(ctx, &DrawLineEx, "DrawLineEx");
    dukglue_register_function(ctx, &DrawLineBezier, "DrawLineBezier");
    dukglue_register_function(ctx, &DrawLineBezierQuad, "DrawLineBezierQuad");
    dukglue_register_function(ctx, &DrawLineBezierCubic, "DrawLineBezierCubic");
    // Skipped: DrawLineStrip
    dukglue_register_function(ctx, &DrawCircle, "DrawCircle");
    dukglue_register_function(ctx, &DrawCircleSector, "DrawCircleSector");
    dukglue_register_function(ctx, &DrawCircleSectorLines, "DrawCircleSectorLines");
    dukglue_register_function(ctx, &DrawCircleGradient, "DrawCircleGradient");
    dukglue_register_function(ctx, &DrawCircleV, "DrawCircleV");
    dukglue_register_function(ctx, &DrawCircleLines, "DrawCircleLines");
    dukglue_register_function(ctx, &DrawEllipse, "DrawEllipse");
    dukglue_register_function(ctx, &DrawEllipseLines, "DrawEllipseLines");
    dukglue_register_function(ctx, &DrawRing, "DrawRing");
    dukglue_register_function(ctx, &DrawRingLines, "DrawRingLines");
    dukglue_register_function(ctx, &DrawRectangle, "DrawRectangle");
    dukglue_register_function(ctx, &DrawRectangleV, "DrawRectangleV");
    dukglue_register_function(ctx, &DrawRectangleRec, "DrawRectangleRec");
    dukglue_register_function(ctx, &DrawRectanglePro, "DrawRectanglePro");
    dukglue_register_function(ctx, &DrawRectangleGradientV, "DrawRectangleGradientV");
    dukglue_register_function(ctx, &DrawRectangleGradientH, "DrawRectangleGradientH");
    dukglue_register_function(ctx, &DrawRectangleGradientEx, "DrawRectangleGradientEx");
    dukglue_register_function(ctx, &DrawRectangleLines, "DrawRectangleLines");
    dukglue_register_function(ctx, &DrawRectangleLinesEx, "DrawRectangleLinesEx");
    dukglue_register_function(ctx, &DrawRectangleRounded, "DrawRectangleRounded");
    dukglue_register_function(ctx, &DrawRectangleRoundedLines, "DrawRectangleRoundedLines");
    dukglue_register_function(ctx, &DrawTriangle, "DrawTriangle");
    dukglue_register_function(ctx, &DrawTriangleLines, "DrawTriangleLines");
    // Skipped: DrawTriangleFan
    // Skipped: DrawTriangleStrip
    // Skipped: DrawPoly
    // Skipped: DrawPolyLines
    // Skipped: DrawPolyLinesEx
    dukglue_register_function(ctx, &CheckCollisionRecs, "CheckCollisionRecs");
    dukglue_register_function(ctx, &CheckCollisionCircles, "CheckCollisionCircles");
    dukglue_register_function(ctx, &CheckCollisionCircleRec, "CheckCollisionCircleRec");
    dukglue_register_function(ctx, &CheckCollisionPointRec, "CheckCollisionPointRec");
    dukglue_register_function(ctx, &CheckCollisionPointCircle, "CheckCollisionPointCircle");
    dukglue_register_function(ctx, &CheckCollisionPointTriangle, "CheckCollisionPointTriangle");
    // Skipped: CheckCollisionLines
    dukglue_register_function(ctx, &CheckCollisionPointLine, "CheckCollisionPointLine");
    dukglue_register_function(ctx, &GetCollisionRec, "GetCollisionRec");
    dukglue_register_function(ctx, &LoadImage, "LoadImage");
    dukglue_register_function(ctx, &LoadImageRaw, "LoadImageRaw");
    // Skipped: LoadImageAnim
    // Skipped: LoadImageFromMemory
    dukglue_register_function(ctx, &LoadImageFromTexture, "LoadImageFromTexture");
    dukglue_register_function(ctx, &LoadImageFromScreen, "LoadImageFromScreen");
    dukglue_register_function(ctx, &UnloadImage, "UnloadImage");
    dukglue_register_function(ctx, &ExportImage, "ExportImage");
    dukglue_register_function(ctx, &ExportImageAsCode, "ExportImageAsCode");
    dukglue_register_function(ctx, &GenImageColor, "GenImageColor");
    dukglue_register_function(ctx, &GenImageGradientV, "GenImageGradientV");
    dukglue_register_function(ctx, &GenImageGradientH, "GenImageGradientH");
    dukglue_register_function(ctx, &GenImageGradientRadial, "GenImageGradientRadial");
    dukglue_register_function(ctx, &GenImageChecked, "GenImageChecked");
    dukglue_register_function(ctx, &GenImageWhiteNoise, "GenImageWhiteNoise");
    dukglue_register_function(ctx, &GenImageCellular, "GenImageCellular");
    dukglue_register_function(ctx, &ImageCopy, "ImageCopy");
    dukglue_register_function(ctx, &ImageFromImage, "ImageFromImage");
    dukglue_register_function(ctx, &ImageText, "ImageText");
    dukglue_register_function(ctx, &ImageTextEx, "ImageTextEx");
    // Skipped: ImageFormat
    // Skipped: ImageToPOT
    // Skipped: ImageCrop
    // Skipped: ImageAlphaCrop
    // Skipped: ImageAlphaClear
    // Skipped: ImageAlphaMask
    // Skipped: ImageAlphaPremultiply
    // Skipped: ImageResize
    // Skipped: ImageResizeNN
    // Skipped: ImageResizeCanvas
    // Skipped: ImageMipmaps
    // Skipped: ImageDither
    // Skipped: ImageFlipVertical
    // Skipped: ImageFlipHorizontal
    // Skipped: ImageRotateCW
    // Skipped: ImageRotateCCW
    // Skipped: ImageColorTint
    // Skipped: ImageColorInvert
    // Skipped: ImageColorGrayscale
    // Skipped: ImageColorContrast
    // Skipped: ImageColorBrightness
    // Skipped: ImageColorReplace
    // Skipped: LoadImageColors
    // Skipped: LoadImagePalette
    // Skipped: UnloadImageColors
    // Skipped: UnloadImagePalette
    // Skipped: GetImageAlphaBorder
    // Skipped: GetImageColor
    // Skipped: ImageClearBackground
    // Skipped: ImageDrawPixel
    // Skipped: ImageDrawPixelV
    // Skipped: ImageDrawLine
    // Skipped: ImageDrawLineV
    // Skipped: ImageDrawCircle
    // Skipped: ImageDrawCircleV
    // Skipped: ImageDrawRectangle
    // Skipped: ImageDrawRectangleV
    // Skipped: ImageDrawRectangleRec
    // Skipped: ImageDrawRectangleLines
    // Skipped: ImageDraw
    // Skipped: ImageDrawText
    // Skipped: ImageDrawTextEx
    dukglue_register_function(ctx, &LoadTexture, "LoadTexture");
    dukglue_register_function(ctx, &LoadTextureFromImage, "LoadTextureFromImage");
    dukglue_register_function(ctx, &LoadTextureCubemap, "LoadTextureCubemap");
    dukglue_register_function(ctx, &LoadRenderTexture, "LoadRenderTexture");
    dukglue_register_function(ctx, &UnloadTexture, "UnloadTexture");
    dukglue_register_function(ctx, &UnloadRenderTexture, "UnloadRenderTexture");
    // Skipped: UpdateTexture
    // Skipped: UpdateTextureRec
    // Skipped: GenTextureMipmaps
    dukglue_register_function(ctx, &SetTextureFilter, "SetTextureFilter");
    dukglue_register_function(ctx, &SetTextureWrap, "SetTextureWrap");
    dukglue_register_function(ctx, &DrawTexture, "DrawTexture");
    dukglue_register_function(ctx, &DrawTextureV, "DrawTextureV");
    dukglue_register_function(ctx, &DrawTextureEx, "DrawTextureEx");
    dukglue_register_function(ctx, &DrawTextureRec, "DrawTextureRec");
    dukglue_register_function(ctx, &DrawTextureQuad, "DrawTextureQuad");
    dukglue_register_function(ctx, &DrawTextureTiled, "DrawTextureTiled");
    dukglue_register_function(ctx, &DrawTexturePro, "DrawTexturePro");
    dukglue_register_function(ctx, &DrawTextureNPatch, "DrawTextureNPatch");
    // Skipped: DrawTexturePoly
    dukglue_register_function(ctx, &Fade, "Fade");
    dukglue_register_function(ctx, &ColorToInt, "ColorToInt");
    dukglue_register_function(ctx, &ColorNormalize, "ColorNormalize");
    dukglue_register_function(ctx, &ColorFromNormalized, "ColorFromNormalized");
    dukglue_register_function(ctx, &ColorToHSV, "ColorToHSV");
    dukglue_register_function(ctx, &ColorFromHSV, "ColorFromHSV");
    dukglue_register_function(ctx, &ColorAlpha, "ColorAlpha");
    dukglue_register_function(ctx, &ColorAlphaBlend, "ColorAlphaBlend");
    dukglue_register_function(ctx, &GetColor, "GetColor");
    // Skipped: GetPixelColor
    // Skipped: SetPixelColor
    // Skipped: GetPixelDataSize
    dukglue_register_function(ctx, &GetFontDefault, "GetFontDefault");
    dukglue_register_function(ctx, &LoadFont, "LoadFont");
    // Skipped: LoadFontEx
    dukglue_register_function(ctx, &LoadFontFromImage, "LoadFontFromImage");
    // Skipped: LoadFontFromMemory
    // Skipped: LoadFontData
    // Skipped: GenImageFontAtlas
    // Skipped: UnloadFontData
    dukglue_register_function(ctx, &UnloadFont, "UnloadFont");
    // Skipped: ExportFontAsCode
    dukglue_register_function(ctx, &DrawFPS, "DrawFPS");
    dukglue_register_function(ctx, &DrawText, "DrawText");
    dukglue_register_function(ctx, &DrawTextEx, "DrawTextEx");
    dukglue_register_function(ctx, &DrawTextPro, "DrawTextPro");
    dukglue_register_function(ctx, &DrawTextCodepoint, "DrawTextCodepoint");
    // Skipped: DrawTextCodepoints
    dukglue_register_function(ctx, &MeasureText, "MeasureText");
    dukglue_register_function(ctx, &MeasureTextEx, "MeasureTextEx");
    dukglue_register_function(ctx, &GetGlyphIndex, "GetGlyphIndex");
    dukglue_register_function(ctx, &GetGlyphInfo, "GetGlyphInfo");
    dukglue_register_function(ctx, &GetGlyphAtlasRec, "GetGlyphAtlasRec");
    // Skipped: LoadCodepoints
    // Skipped: UnloadCodepoints
    dukglue_register_function(ctx, &GetCodepointCount, "GetCodepointCount");
    // Skipped: GetCodepoint
    // Skipped: CodepointToUTF8
    // Skipped: TextCodepointsToUTF8
    // Skipped: TextCopy
    dukglue_register_function(ctx, &TextIsEqual, "TextIsEqual");
    dukglue_register_function(ctx, &TextLength, "TextLength");
    // Skipped: TextFormat
    dukglue_register_function(ctx, &TextSubtext, "TextSubtext");
    // Skipped: TextReplace
    // Skipped: TextInsert
    // Skipped: TextJoin
    // Skipped: TextSplit
    // Skipped: TextAppend
    dukglue_register_function(ctx, &TextFindIndex, "TextFindIndex");
    dukglue_register_function(ctx, &TextToUpper, "TextToUpper");
    dukglue_register_function(ctx, &TextToLower, "TextToLower");
    dukglue_register_function(ctx, &TextToPascal, "TextToPascal");
    dukglue_register_function(ctx, &TextToInteger, "TextToInteger");
    dukglue_register_function(ctx, &DrawLine3D, "DrawLine3D");
    dukglue_register_function(ctx, &DrawPoint3D, "DrawPoint3D");
    dukglue_register_function(ctx, &DrawCircle3D, "DrawCircle3D");
    dukglue_register_function(ctx, &DrawTriangle3D, "DrawTriangle3D");
    // Skipped: DrawTriangleStrip3D
    dukglue_register_function(ctx, &DrawCube, "DrawCube");
    dukglue_register_function(ctx, &DrawCubeV, "DrawCubeV");
    dukglue_register_function(ctx, &DrawCubeWires, "DrawCubeWires");
    dukglue_register_function(ctx, &DrawCubeWiresV, "DrawCubeWiresV");
    dukglue_register_function(ctx, &DrawCubeTexture, "DrawCubeTexture");
    dukglue_register_function(ctx, &DrawCubeTextureRec, "DrawCubeTextureRec");
    dukglue_register_function(ctx, &DrawSphere, "DrawSphere");
    dukglue_register_function(ctx, &DrawSphereEx, "DrawSphereEx");
    dukglue_register_function(ctx, &DrawSphereWires, "DrawSphereWires");
    dukglue_register_function(ctx, &DrawCylinder, "DrawCylinder");
    dukglue_register_function(ctx, &DrawCylinderEx, "DrawCylinderEx");
    dukglue_register_function(ctx, &DrawCylinderWires, "DrawCylinderWires");
    dukglue_register_function(ctx, &DrawCylinderWiresEx, "DrawCylinderWiresEx");
    dukglue_register_function(ctx, &DrawPlane, "DrawPlane");
    dukglue_register_function(ctx, &DrawRay, "DrawRay");
    dukglue_register_function(ctx, &DrawGrid, "DrawGrid");
    dukglue_register_function(ctx, &LoadModel, "LoadModel");
    dukglue_register_function(ctx, &LoadModelFromMesh, "LoadModelFromMesh");
    dukglue_register_function(ctx, &UnloadModel, "UnloadModel");
    dukglue_register_function(ctx, &UnloadModelKeepMeshes, "UnloadModelKeepMeshes");
    dukglue_register_function(ctx, &GetModelBoundingBox, "GetModelBoundingBox");
    dukglue_register_function(ctx, &DrawModel, "DrawModel");
    dukglue_register_function(ctx, &DrawModelEx, "DrawModelEx");
    dukglue_register_function(ctx, &DrawModelWires, "DrawModelWires");
    dukglue_register_function(ctx, &DrawModelWiresEx, "DrawModelWiresEx");
    dukglue_register_function(ctx, &DrawBoundingBox, "DrawBoundingBox");
    dukglue_register_function(ctx, &DrawBillboard, "DrawBillboard");
    dukglue_register_function(ctx, &DrawBillboardRec, "DrawBillboardRec");
    dukglue_register_function(ctx, &DrawBillboardPro, "DrawBillboardPro");
    // Skipped: UploadMesh
    // Skipped: UpdateMeshBuffer
    dukglue_register_function(ctx, &UnloadMesh, "UnloadMesh");
    dukglue_register_function(ctx, &DrawMesh, "DrawMesh");
    // Skipped: DrawMeshInstanced
    dukglue_register_function(ctx, &ExportMesh, "ExportMesh");
    dukglue_register_function(ctx, &GetMeshBoundingBox, "GetMeshBoundingBox");
    // Skipped: GenMeshTangents
    dukglue_register_function(ctx, &GenMeshPoly, "GenMeshPoly");
    dukglue_register_function(ctx, &GenMeshPlane, "GenMeshPlane");
    dukglue_register_function(ctx, &GenMeshCube, "GenMeshCube");
    dukglue_register_function(ctx, &GenMeshSphere, "GenMeshSphere");
    dukglue_register_function(ctx, &GenMeshHemiSphere, "GenMeshHemiSphere");
    dukglue_register_function(ctx, &GenMeshCylinder, "GenMeshCylinder");
    dukglue_register_function(ctx, &GenMeshCone, "GenMeshCone");
    dukglue_register_function(ctx, &GenMeshTorus, "GenMeshTorus");
    dukglue_register_function(ctx, &GenMeshKnot, "GenMeshKnot");
    dukglue_register_function(ctx, &GenMeshHeightmap, "GenMeshHeightmap");
    dukglue_register_function(ctx, &GenMeshCubicmap, "GenMeshCubicmap");
    // Skipped: LoadMaterials
    dukglue_register_function(ctx, &LoadMaterialDefault, "LoadMaterialDefault");
    dukglue_register_function(ctx, &UnloadMaterial, "UnloadMaterial");
    // Skipped: SetMaterialTexture
    // Skipped: SetModelMeshMaterial
    // Skipped: LoadModelAnimations
    dukglue_register_function(ctx, &UpdateModelAnimation, "UpdateModelAnimation");
    dukglue_register_function(ctx, &UnloadModelAnimation, "UnloadModelAnimation");
    // Skipped: UnloadModelAnimations
    dukglue_register_function(ctx, &IsModelAnimationValid, "IsModelAnimationValid");
    dukglue_register_function(ctx, &CheckCollisionSpheres, "CheckCollisionSpheres");
    dukglue_register_function(ctx, &CheckCollisionBoxes, "CheckCollisionBoxes");
    dukglue_register_function(ctx, &CheckCollisionBoxSphere, "CheckCollisionBoxSphere");
    dukglue_register_function(ctx, &GetRayCollisionSphere, "GetRayCollisionSphere");
    dukglue_register_function(ctx, &GetRayCollisionBox, "GetRayCollisionBox");
    dukglue_register_function(ctx, &GetRayCollisionMesh, "GetRayCollisionMesh");
    dukglue_register_function(ctx, &GetRayCollisionTriangle, "GetRayCollisionTriangle");
    dukglue_register_function(ctx, &GetRayCollisionQuad, "GetRayCollisionQuad");
    dukglue_register_function(ctx, &InitAudioDevice, "InitAudioDevice");
    dukglue_register_function(ctx, &CloseAudioDevice, "CloseAudioDevice");
    dukglue_register_function(ctx, &IsAudioDeviceReady, "IsAudioDeviceReady");
    dukglue_register_function(ctx, &SetMasterVolume, "SetMasterVolume");
    dukglue_register_function(ctx, &LoadWave, "LoadWave");
    // Skipped: LoadWaveFromMemory
    dukglue_register_function(ctx, &LoadSound, "LoadSound");
    dukglue_register_function(ctx, &LoadSoundFromWave, "LoadSoundFromWave");
    // Skipped: UpdateSound
    dukglue_register_function(ctx, &UnloadWave, "UnloadWave");
    dukglue_register_function(ctx, &UnloadSound, "UnloadSound");
    dukglue_register_function(ctx, &ExportWave, "ExportWave");
    dukglue_register_function(ctx, &ExportWaveAsCode, "ExportWaveAsCode");
    dukglue_register_function(ctx, &PlaySound, "PlaySound");
    dukglue_register_function(ctx, &StopSound, "StopSound");
    dukglue_register_function(ctx, &PauseSound, "PauseSound");
    dukglue_register_function(ctx, &ResumeSound, "ResumeSound");
    dukglue_register_function(ctx, &PlaySoundMulti, "PlaySoundMulti");
    dukglue_register_function(ctx, &StopSoundMulti, "StopSoundMulti");
    dukglue_register_function(ctx, &GetSoundsPlaying, "GetSoundsPlaying");
    dukglue_register_function(ctx, &IsSoundPlaying, "IsSoundPlaying");
    dukglue_register_function(ctx, &SetSoundVolume, "SetSoundVolume");
    dukglue_register_function(ctx, &SetSoundPitch, "SetSoundPitch");
    dukglue_register_function(ctx, &SetSoundPan, "SetSoundPan");
    dukglue_register_function(ctx, &WaveCopy, "WaveCopy");
    // Skipped: WaveCrop
    // Skipped: WaveFormat
    // Skipped: LoadWaveSamples
    // Skipped: UnloadWaveSamples
    dukglue_register_function(ctx, &LoadMusicStream, "LoadMusicStream");
    // Skipped: LoadMusicStreamFromMemory
    dukglue_register_function(ctx, &UnloadMusicStream, "UnloadMusicStream");
    dukglue_register_function(ctx, &PlayMusicStream, "PlayMusicStream");
    dukglue_register_function(ctx, &IsMusicStreamPlaying, "IsMusicStreamPlaying");
    dukglue_register_function(ctx, &UpdateMusicStream, "UpdateMusicStream");
    dukglue_register_function(ctx, &StopMusicStream, "StopMusicStream");
    dukglue_register_function(ctx, &PauseMusicStream, "PauseMusicStream");
    dukglue_register_function(ctx, &ResumeMusicStream, "ResumeMusicStream");
    dukglue_register_function(ctx, &SeekMusicStream, "SeekMusicStream");
    dukglue_register_function(ctx, &SetMusicVolume, "SetMusicVolume");
    dukglue_register_function(ctx, &SetMusicPitch, "SetMusicPitch");
    dukglue_register_function(ctx, &SetMusicPan, "SetMusicPan");
    dukglue_register_function(ctx, &GetMusicTimeLength, "GetMusicTimeLength");
    dukglue_register_function(ctx, &GetMusicTimePlayed, "GetMusicTimePlayed");
    dukglue_register_function(ctx, &LoadAudioStream, "LoadAudioStream");
    dukglue_register_function(ctx, &UnloadAudioStream, "UnloadAudioStream");
    // Skipped: UpdateAudioStream
    dukglue_register_function(ctx, &IsAudioStreamProcessed, "IsAudioStreamProcessed");
    dukglue_register_function(ctx, &PlayAudioStream, "PlayAudioStream");
    dukglue_register_function(ctx, &PauseAudioStream, "PauseAudioStream");
    dukglue_register_function(ctx, &ResumeAudioStream, "ResumeAudioStream");
    dukglue_register_function(ctx, &IsAudioStreamPlaying, "IsAudioStreamPlaying");
    dukglue_register_function(ctx, &StopAudioStream, "StopAudioStream");
    dukglue_register_function(ctx, &SetAudioStreamVolume, "SetAudioStreamVolume");
    dukglue_register_function(ctx, &SetAudioStreamPitch, "SetAudioStreamPitch");
    dukglue_register_function(ctx, &SetAudioStreamPan, "SetAudioStreamPan");
    dukglue_register_function(ctx, &SetAudioStreamBufferSizeDefault, "SetAudioStreamBufferSizeDefault");
    // Skipped: SetAudioStreamCallback
    // Skipped: AttachAudioStreamProcessor
    // Skipped: DetachAudioStreamProcessor
}
